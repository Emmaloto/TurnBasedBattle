/** This is the class for controlling the health bars of both the hero 
 * and villain. This class replaces HPBar, as the bars generated by that 
 * class were not resizable.
 *
 * @author  Emmanuel Oluloto
 * @version 1.40, 24/02/18
 */

package defaultpack;
import java.awt.*;

public class HPResizeBar {

  private int healthVal, defaultHeight, maxHealth, newWidth;
  private Rectangle health, border;
  private Color c, normalColor;
  private int orgX, orgY, orgW, orgNewWidth, orgH;
  

  // Health points bar
  public HPResizeBar(){
	this(200, 100,  500, 75, 600, Color.RED);
  }
  
  public HPResizeBar(int x, int y){
	this(x, y, 500, 75, 600, Color.RED);
  }

  public HPResizeBar(int x, int y, int hVal, Color cl){
	this(x, y, 500, 75, 600, cl);
  }  
  
  public HPResizeBar(int hVal){
	this(100, 100, 500, 75, hVal, Color.RED);
  }  

  public HPResizeBar(Color cl){
	this(100, 100, 500, 75, 600, cl);
  }   
  
  
  public HPResizeBar(int x, int y, int width, int height, int hVal, Color col){

	health = new Rectangle(x, y, width, height);
	border = new Rectangle(x, y, width, height);
	c = col;
	normalColor = c;
	defaultHeight = height;
	
	healthVal = hVal;
	maxHealth = hVal;
  }
  
  // Scales bar with scaling factor
  private void scaleBar(double scaleX, double scaleY, boolean doResize){
	  

	  if(doResize){
	    orgX =        (int)border.getX(); 
	    orgY =        (int)border.getY();
	    orgW =        (int)border.getWidth();
	    orgNewWidth = (int)health.getWidth();
	    orgH        = (int)border.getHeight();
	  
	    health.setSize((int)(health.getWidth()*scaleX), (int)(health.getHeight()*scaleY));
	    health.setLocation((int)(health.getX()*scaleX), (int)(health.getY()*scaleY));

	    border.setSize((int)(border.getWidth()*scaleX), (int)(border.getHeight()*scaleY));
	    border.setLocation((int)(border.getX()*scaleX), (int)(border.getY()*scaleY));
	  }else{
	  
	    health.setSize(orgNewWidth, orgH);
	    health.setLocation(orgX, orgY);

	    border.setSize(orgW, orgH);
	    border.setLocation(orgX, orgY);
	  }
  }
  
  
  public void drawHealth(double scaleX, double scaleY, Graphics2D g){
	  
	  scaleBar(scaleX, scaleY, true);
	  
	  
	  g.setColor(c);
	  g.draw(health);	  
	  g.fill(health);
	  
	  g.setColor(Color.BLACK);
	  g.setStroke(new BasicStroke(3));
	  g.draw(border);
	  
	  g.setColor(Color.WHITE);
	  int fontSize = (int)(55 * (  (scaleX+scaleY)/2 )  ) ;
	  g.setFont(  new Font( "SansSerif", Font.PLAIN, fontSize) );
	  
	  
	  // Scale text inside health bar
	  int textX = (int)(border.getX() + 55 *(scaleX) + border.getWidth()/3);
	  int textY = (int)(border.getY() + 55*(scaleY));  
	  g.drawString(Integer.toString(healthVal), textX, textY);
	  
	  g.setColor(Color.BLACK);
	  
	  scaleBar(scaleX, scaleY, false);
	  
	  


	  
  }
  
  public void drawHealth(Graphics2D g){
     drawHealth(1, 1, g);
  }  

  // Decreases hp, bar glowing bar for low hp
  public void setHealth(int h){
	 
    healthVal = healthVal - h;
    newWidth = ( healthVal * (int)border.getWidth() )/maxHealth ;

    
    if(healthVal > 0 && healthVal <= maxHealth){ // Is inbetween empty and ful
      health.setSize(newWidth, defaultHeight);
      
    }else if(healthVal > maxHealth){             // Is full
      health.setSize((int)border.getWidth(), defaultHeight);	
      healthVal = maxHealth;
    }else if(healthVal <= 0){							  // Is empty
      health.setSize(0, defaultHeight);
      healthVal = 0;
    }
    
    if(newWidth < border.getWidth()/4)                // Health is low
      c = new Color(255, 148, 148, 100);
	else
	  c = normalColor;
  }

  public int getHealth(){
    return healthVal;

  }

}
